---
type Variant = 'primary' | 'secondary';
type Type = 'button' | 'submit';

interface Props {
  className: string;
  text: string;
  label: string;
  variant?: Variant;
  type?: Type;
}

const {
  className,
  text,
  label,
  variant = 'primary',
  type = 'button',
} = Astro.props;
---

<button
  class={`lf-medium btn btn_${variant} ${className}`}
  type={type}
  aria-label={label}
>
  {text}
</button>

<style lang='scss'>
  @use 'sass:color';
  @import '../../styles/variables.scss';

  button {
    width: 100%;
    border: none;
    cursor: pointer;
    outline: 0;
  }

  button:focus,
  button:focus-visible,
  a:focus,
  a:focus-visible {
    outline: 0;
  }

  .btn {
    padding: 1.25rem 2rem;
    border-radius: 0.5rem;
    min-width: max-content;

    &_primary {
      background-color: $primary;
      color: $white;

      &:hover {
        background-color: color.scale($primary, $lightness: 15%);
      }

      &:active {
        -webkit-box-shadow: $primary-button-active-shadow;
        -moz-box-shadow: $primary-button-active-shadow;
        box-shadow: $primary-button-active-shadow;
      }

      &:focus-visible {
        -webkit-box-shadow: $primary-button-focus-shadow;
        -moz-box-shadow: $primary-button-focus-shadow;
        box-shadow: $primary-button-focus-shadow;
      }
    }

    &_secondary {
      background-color: $white;
      color: $dark;

      &:hover {
        background-color: color.scale($white, $lightness: -2%);
      }

      &:active {
        -webkit-box-shadow: $secondary-button-active-shadow;
        -moz-box-shadow: $secondary-button-active-shadow;
        box-shadow: $secondary-button-active-shadow;
      }

      &:focus-visible {
        -webkit-box-shadow: $secondary-button-focus-shadow;
        -moz-box-shadow: $secondary-button-focus-shadow;
        box-shadow: $secondary-button-focus-shadow;
      }
    }
  }

  // Above mobile
  @media only screen and (min-width: $mobile) {
    .button {
      width: max-content;
    }
  }
</style>

<script>
  const ctaButtons = document.querySelectorAll('button.cta');
  ctaButtons.forEach((button: HTMLButtonElement) => {
    button.addEventListener('click', () => {
      const form = document.getElementById('contact-form') as HTMLFormElement;
      const input = form.elements[0] as HTMLInputElement;
      if (input) {
        document.getElementById('contact').scrollIntoView({
          behavior: 'smooth',
        });
        setTimeout(function () {
          input.focus();
        }, 500);
      }
    });
  });
</script>
